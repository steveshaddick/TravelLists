function Location(e, t) {
    this.name = e.name;
    this.id = e.id;
    this.listOrder = e.listOrder;
    this.lat = e.lat;
    this.lng = e.lng;
    this.isOpen = true;
    this.wasOpen = true;
    this.totalNotes = 0;
    this.topOffset = this.bottomOffset = 0;
    this.hash = "";
    this.text = [];
    this.text["suggestCTA"] = "";
    this.text["noteTextPlaceholder"] = "";
    this.$element = null;
    this.$notesElement = null;
    this.$showHideButton = null;
    this.$noteText = null;
    this.$noteEditor = null;
    this.notes = [];
    var t = typeof t === "undefined" ? false : t;
    this.$element = $("#clsLocation").clone(true).attr("id", "location_" + this.id);
    this.$element.html(this.$element.html().replace(/\$LOCATION\$/g, this.name).replace(/\$LOCATION_ID\$/g, this.id));
    this.$element.attr("data-order", this.listOrder);
    this.hash = this.name.indexOf(",") > -1 ? this.name.substring(0, this.name.indexOf(",")) : this.name;
    $(".anchor", this.$element).attr("id", this.hash);
    this.$noteText = $(".txtNoteText", this.$element);
    this.$noteEditor = $(".note-editor", this.$element);
    this.text["suggestCTA"] = $(".note-text-label", this.$element).html();
    var o = Math.floor(Math.random() * 10);
    this.text["noteTextPlaceholder"] = "ex. You've got to try the skybar!";
    switch (o) {
      case 0:
        this.text["noteTextPlaceholder"] = "ex. There's a great hostel called Best Hostel Ever.";
        break;

      case 1:
        this.text["noteTextPlaceholder"] = "ex. Go to Mindy's and order the soup.";
        break;

      case 2:
        this.text["noteTextPlaceholder"] = "ex. Contemporary art gallery. Don't miss it.";
        break;
    }
    this.$noteText.attr("placeholder", this.text["noteTextPlaceholder"]).focus({
        location: this
    }, this.noteTextFocus);
    this.$showHideButton = $(".show-hide-link", this.$element);
    this.$showHideButton.click({
        location: this
    }, this.showHide);
    var n = $("#locations > .location");
    if (n.length === 0 || t) {
        $("#locations").append(this.$element);
    } else {
        var i = this;
        var a = false;
        n.each(function() {
            if (!a) {
                if ($(this).attr("data-order") > i.listOrder) {
                    $(this).before(i.$element);
                    a = true;
                }
            }
        });
        if (!a) {
            $("#locations").append(this.$element);
        }
    }
    this.$notesElement = $(".notes-wrapper", this.$element);
    var l;
    for (var s = 0, r = e.notes.length; s < r; s++) {
        this.addNote(e.notes[s]);
    }
}

Location.prototype.destroy = function() {};

Location.prototype.addNote = function(e, t) {
    var o = $("#clsNote").clone().attr("id", "note_" + e.id);
    t = typeof t == "undefined" ? false : t;
    if (e.canDelete) {
        $(".note-delete a", o).removeClass("edit-mode").click({
            location: this,
            noteId: e.id
        }, this.deleteNoteClickHandler);
    }
    e.$element = o;
    this.notes[e.id] = e;
    if (e.linkCheck <= new Date().valueOf() / 1e3) {
        Main.queueLinkCheck(this, e.id, e.linkUrl);
    }
    this.parseNote(e.id);
    this.$notesElement.append(o);
    if (this.isOpen && t) {
        o.hide().show("slow");
    }
    this.$showHideButton.removeClass("hidden");
    this.totalNotes++;
    this.expand();
    if (e.id > GLOBAL.lastNote) {
        GLOBAL.lastNote = e.id;
    }
};

Location.prototype.parseNote = function(e, t) {
    var o = this.notes[e];
    if (typeof t != "undefined") {
        o.linkTitle = t.linkTitle;
        o.linkImage = t.linkImage;
        o.linkDescription = t.linkDescription;
    }
    var n;
    var i = o.note;
    if (o.linkUrl != "") {
        if (o.linkImage != "" || o.linkDescription != "") {
            $(".link-title", o.$element).attr("href", o.linkUrl).html(o.linkTitle);
            if (i == o.linkUrl) {
                $(".note-text", o.$element).css("display", "none");
            } else {
                $(".note-text", o.$element).css("display", "");
            }
            $(".note-link", o.$element).css("display", "");
            if (o.linkImage != "") {
                $(".link-image", o.$element).attr("src", o.linkImage).parent().attr("href", o.linkUrl);
            } else {
                $(".link-image", o.$element).addClass("hidden");
            }
            if (o.linkDescription != "") {
                $(".link-description", o.$element).html(o.linkDescription);
            }
        } else {
            $(".note-link", o.$element).css("display", "none");
        }
    } else {
        $(".note-link", o.$element).css("display", "none");
    }
    n = /(\(?\bhttps?:\/\/[-A-Za-z0-9+&@#\/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#\/%=~_()|])/g;
    i = i.replace(n, '<a target="_blank" href="$1">$1</a>').replace(/href="\(/g, 'href="').replace(/\)">/g, '">');
    switch (o.categoryId) {
      case "1":
        $(".note-category", o.$element).addClass("stay");
        break;

      case "2":
        $(".note-category", o.$element).addClass("food");
        break;

      case "3":
        $(".note-category", o.$element).addClass("poi");
        break;
    }
    if (o.fromName == "") {
        o.fromName = "Anonymous";
    }
    $(".note-text", o.$element).html(i);
    $(".note-from", o.$element).html("-" + o.fromName);
};

Location.prototype.deleteNoteClickHandler = function(e) {
    var t = e.data.location;
    var o = t.notes[e.data.noteId];
    if (typeof o == "undefined" || !o.canDelete) return;
    Ajax.call("deleteNote", {
        noteId: o.id,
        noteCookie: GLOBAL.noteCookie
    }, function() {
        $("#note_" + o.id).remove();
        delete t.notes[o.id];
        t.totalNotes--;
    }, function() {});
    return false;
};

Location.prototype.showHide = function(e) {
    var t = e.data.location;
    if (t.isOpen) {
        t.collapse();
    } else {
        t.expand();
    }
    return false;
};

Location.prototype.collapse = function() {
    this.cancelNote();
    $(".notes-hidden .number", this.$element).html(this.totalNotes);
    $(".notes-wrapper", this.$element).slideUp();
    $(".notes-hidden", this.$element).show();
    this.isOpen = false;
    this.$showHideButton.html("+").attr("title", "Expand");
};

Location.prototype.expand = function() {
    $(".notes-wrapper", this.$element).slideDown();
    $(".notes-hidden", this.$element).hide();
    this.isOpen = true;
    this.$showHideButton.html("&#150;").attr("title", "Collapse");
};

Location.prototype.forceCollapse = function() {
    this.wasOpen = this.isOpen;
    this.collapse();
};

Location.prototype.reExpand = function() {
    if (this.wasOpen) {
        this.expand();
    }
};

Location.prototype.noteTextFocus = function(e) {
    var t = e.data.location;
    if (GLOBAL.activeNoteLocation === t) return;
    if (GLOBAL.activeNoteLocation) {
        GLOBAL.activeNoteLocation.cancelNote();
    }
    t.editNote();
};

Location.prototype.noteTextBlur = function(e) {};

Location.prototype.editNote = function() {
    var e = this;
    GLOBAL.activeNoteLocation = this;
    $(".note-text-label", this.$element).addClass("hidden");
    this.$noteText.attr("placeholder", "").addClass("editing");
    this.$noteText.keyup(function(t) {
        if (t.which == 27) {
            e.cancelNote();
            return;
        }
        if (t.which == 13) {
            if ($("#txtFromName").val() == "") {
                $("#txtFromName").focus();
            } else {
                e.submitNote();
            }
        }
    });
    $(".category-wrapper", this.$element).append($("#clsCategorySelector"));
    $(".note-editor-bottom", this.$element).append($("#clsNoteFrom")).append($("#clsSubmitNote"));
    $("#txtFromName").keyup(function(t) {
        if (t.which == 27) {
            e.cancelNote();
            return;
        }
        if (t.which == 13) {
            e.submitNote();
        }
    });
    $("#submitNoteButton").click(function() {
        e.submitNote();
        return false;
    });
    $("#cancelNoteButton").click(function() {
        e.cancelNote();
        return false;
    });
};

Location.prototype.cancelNote = function() {
    GLOBAL.activeNoteLocation = null;
    this.$noteEditor.off("focusout");
    $(".note-text-label", this.$element).removeClass("hidden");
    this.$noteText.attr("placeholder", this.text["noteTextPlaceholder"]).removeClass("editing").unbind("keyup").val("").blur();
    $("#cls").append($("#clsCategorySelector")).append($("#clsNoteFrom")).append($("#clsSubmitNote"));
    $("#txtFromName").unbind("keyup");
    $("#submitNoteButton").unbind("click");
    $("#cancelNoteButton").unbind("click");
};

Location.prototype.submitNote = function() {
    var e = $.trim(this.$noteText.val());
    var t = $("#selCategory").val();
    var o = $.trim($("#txtFromName").val());
    if (e == "") {
        this.cancelNote();
        return;
    }
    if (o == "") {
        o = "Anonymous";
    }
    $.cookie("from", o, {
        expires: 365,
        path: "/"
    });
    if (!GLOBAL.noteCookie) {
        GLOBAL.noteCookie = "";
        var n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        for (var i = 0; i < 10; i++) GLOBAL.noteCookie += n.charAt(Math.floor(Math.random() * n.length));
        GLOBAL.noteCookie += new Date().valueOf();
    }
    $(".blocker", this.$element).removeClass("hidden");
    var a = this;
    Ajax.call("addNote", {
        noteText: e,
        fromName: o,
        categoryId: t,
        locationId: this.id,
        noteCookie: GLOBAL.noteCookie
    }, function(e) {
        a.cancelNote();
        $(".blocker", this.$element).addClass("hidden");
        e.categoryId = t;
        a.addNote(e);
    }, function() {
        a.cancelNote();
        $(".blocker", this.$element).addClass("hidden");
    });
};

var Trip = function() {
    var e;
    var t = [];
    var o = 0;
    var n;
    var i = "";
    var a = "";
    var l = "";
    var s = false;
    var r = null;
    var c = false;
    var d = true;
    var u;
    var f = "";
    var p;
    function h(t) {
        $("body select").msDropDown();
        Ajax.call("loadTrip", {}, function(e) {
            for (var t = 0, o = e.locations.length; t < o; t++) {
                if (t < o - 1) {
                    v(e.locations[t], true);
                } else {
                    v(e.locations[t]);
                }
            }
            i = e.tripName;
            a = e.tripAuthor;
            l = e.email;
            $("#editTripButton").click(C);
            if (GLOBAL.isAdmin) {
                ListAdmin.init(e.notices);
            }
            Main.poll();
            m();
        }, function() {});
        n = new google.maps.LatLngBounds();
        var o = {
            center: new google.maps.LatLng(t.lat, t.lng),
            zoom: 4,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            disableDefaultUI: true,
            disableDoubleClickZoom: true,
            scrollwheel: false
        };
        e = new google.maps.Map(document.getElementById("map"), o);
        if ($.cookie("from")) {
            $("#txtFromName").val($.cookie("from"));
        }
        p = $("#stickyLocation");
        u = $(document);
        $(window).scroll(m);
    }
    function m() {
        if (c) {
            d = true;
            return;
        }
        var e = u.scrollTop();
        var o = "";
        for (var n in t) {
            if (e > t[n].location.$element.offset().top + 50 && e < t[n].location.$element.offset().top + t[n].location.$element.height() - 200) {
                o = t[n].location.name;
                break;
            } else {
                o = "";
            }
        }
        if (o != f) {
            f = o;
            if (o != "") {
                p.css("top", 0);
                $(".location-name", p).html(o).attr("href", "#" + t[n].location.hash);
            } else {
                p.css("top", "");
            }
        }
        d = false;
        c = true;
        setTimeout(function() {
            c = false;
            if (d) m();
        }, 50);
    }
    function v(i, a) {
        var l = new Location(i);
        var s = null;
        if (l.lat != 0 && l.lng != 0) {
            var r = {
                animation: google.maps.Animation.DROP,
                position: new google.maps.LatLng(l.lat, l.lng),
                title: l.name
            };
            s = new google.maps.Marker(r);
            google.maps.event.addListener(s, "click", function() {
                var e = l.$element.offset().top;
                $("html, body").animate({
                    scrollTop: e
                }, 500);
            });
            s.setMap(e);
            n.extend(r.position);
        }
        t[l.id] = {
            location: l,
            marker: s
        };
        o++;
        if (i.id > GLOBAL.lastLocation) {
            GLOBAL.lastLocation = i.id;
        }
        if (typeof a == "undefined") {
            if (o > 1) {
                e.fitBounds(n);
            } else {
                e.setCenter(r.position);
            }
        }
    }
    function k(e, o) {
        if (typeof t[e.locationId] !== "undefined") {
            t[e.locationId].location.addNote(e, o);
        }
    }
    function L(i) {
        $("#location_" + i).remove();
        if (t[i].marker) {
            t[i].marker.setMap(null);
        }
        t[i].location.destroy();
        t.splice(i, 1);
        o--;
        if (o > 1) {
            n = new google.maps.LatLngBounds();
            for (var a in t) {
                if (t[a].marker) {
                    n.extend(t[a].marker.getPosition());
                    e.fitBounds(n);
                }
            }
        }
    }
    function x(e, t) {
        var n = $("#location_" + e);
        var i = parseInt(n.attr("data-order"));
        var a = t ? i - 1 : i + 1;
        if (a < 1) return;
        if (a > o) return;
        var l = $(".location").filter(function() {
            return $.attr(this, "data-order") == a;
        });
        Ajax.call("reorderLocation", {
            currentLocation: e,
            swapLocation: l.attr("id").replace("location_", ""),
            newOrder: a,
            swapOrder: i
        }, function(e) {
            l.attr("data-order", i);
            n.attr("data-order", a);
            if (t) {
                l.before(n);
            } else {
                l.after(n);
            }
        }, function() {});
    }
    function b(e) {
        console.log(e);
    }
    function g() {
        return {
            tripName: i,
            tripAuthor: a
        };
    }
    function C() {
        EditModeModal.open();
        return false;
    }
    function y() {
        for (var e in t) {
            t[e].location.forceCollapse();
        }
    }
    function N() {
        for (var e in t) {
            t[e].location.reExpand();
        }
    }
    return {
        loadTrip: h,
        addLocation: v,
        addNote: k,
        deleteLocation: L,
        reorderLocation: x,
        getTripInfo: g,
        forceCollapseNotes: y,
        reExpandNotes: N
    };
}();

var EditModeModal = function() {
    var e;
    var t;
    var o = false;
    function n() {
        Modal.load("/views/modal/enterEmail.html", l, "email-modal");
    }
    function i(e) {
        var t = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return t.test(e);
    }
    function a(o) {
        var n = true;
        if ($.trim(e.val()) == "") {
            n = false;
        }
        if (e.hasClass("error")) {
            e.removeClass("error");
            $("#errorReturn").addClass("hidden");
        }
        if (n) {
            t.removeClass("hidden");
        } else {
            t.addClass("hidden");
        }
    }
    function l() {
        t = $("#emailAdmin");
        e = $("#txtEmail");
        o = false;
        e.keyup(a).focus();
        t.click(s);
        $("#isRemember").click(r);
        $(document).keyup(c);
        $("#oopsLink").click(d);
        if ($.cookie("email")) {
            $("#isRemember").prop("checked", true);
            e.val($.cookie("email"));
        } else {
            t.focus();
        }
        a();
    }
    function s() {
        if (o) return;
        var t = e.val();
        if (!i(t)) {
            e.addClass("error");
            return;
        }
        o = true;
        if ($("#isRemember").is(":checked")) {
            $.cookie("email", t, {
                expires: 365,
                path: "/"
            });
        }
        Ajax.call("checkEditMode", {
            email: t
        }, function() {
            EditMode.init();
            d();
        }, function() {
            e.addClass("error");
            $("#errorReturn").removeClass("hidden");
            o = false;
        });
        return false;
    }
    function r() {
        if (!$("#isRemember").is(":checked")) {
            $.removeCookie("email", {
                path: "/"
            });
        }
    }
    function c(e) {
        switch (e.which) {
          case 13:
            s();
            break;
        }
    }
    function d() {
        e.unbind("keyup", a);
        t.unbind("click", s);
        $("#isRemember").unbind("click", r);
        $(document).unbind("keyup", c);
        t = null;
        e = null;
        o = false;
        Modal.close();
        return false;
    }
    return {
        open: n,
        close: d
    };
}();

var EditMode = function() {
    var e = null;
    var t;
    var o;
    var n = [];
    function i() {
        $(".edit-mode").removeClass("edit-off");
        if (GLOBAL.activeNoteLocation) {
            GLOBAL.activeNoteLocation.cancelNote();
        }
        $(".add-note").addClass("hidden");
        $("header").addClass("edit-on");
        $("#map").addClass("edit-on");
        $("#addLocationButton").click(l);
        $(document).on("click", ".delete-location-button", c).on("click", ".location-up", d).on("click", ".location-down", d);
        $("#editDoneButton").click(a);
        t = new EditText($("#tripTitle"), function() {
            f({
                tripTitle: $("#tripTitle").html()
            });
        });
        o = new EditText($("#tripSubtitle"), function() {
            f({
                tripSubtitle: $("#tripSubtitle").html()
            });
        });
        $("#editBar").slideDown();
        Trip.forceCollapseNotes();
    }
    function a() {
        Ajax.call("closeEditMode");
        $(".edit-mode").addClass("edit-off");
        $(".add-note").removeClass("hidden");
        $("header").removeClass("edit-on");
        $("#map").removeClass("edit-on");
        $("#addLocationButton").unbind("click");
        $(document).unbind("click");
        $("#editDoneButton").unbind("click");
        t.destroy();
        o.destroy();
        $("#editBar").slideUp();
        Trip.reExpandNotes();
        return false;
    }
    function l() {
        $("html, body").scrollTop(0);
        Modal.load("/views/modal/addLocation.html", function() {
            var t = {
                types: [ "(regions)" ]
            };
            e = new google.maps.places.Autocomplete(document.getElementById("txtLocation"), t);
            Modal.jQ(".submit-location-link").click(s);
            Modal.jQ(".cancel-link").click(r);
        }, "location-modal");
        return false;
    }
    function s() {
        var e = $("#txtLocation").val();
        $("#txtLocation").prop("disabled", true);
        Ajax.call("addLocation", {
            location: e
        }, function(e) {
            r();
            Trip.addLocation(e);
        }, function() {
            $("#txtLocation").val("");
            $("#txtLocation").prop("disabled", false);
        });
        return false;
    }
    function r() {
        e = null;
        Modal.jQ(".submit-location-link").unbind("click");
        Modal.jQ(".cancel-link").unbind("click");
        Modal.close();
        return false;
    }
    function c(e) {
        var t = $(this).attr("data-id");
        Ajax.call("deleteLocation", {
            locationId: t
        }, function(e) {
            Trip.deleteLocation(t);
        }, function() {});
        return false;
    }
    function d(e) {
        var t = $(this).attr("data-id");
        Trip.reorderLocation(t, $(e.target).hasClass("location-up") ? true : false);
        return false;
    }
    function u(e) {
        f(e.html());
    }
    function f(e) {
        Ajax.call("saveTrip", e);
    }
    return {
        init: i,
        dinit: a
    };
}();

var EditText = function(e, t) {
    this.$element = e;
    this.saveCallback = t;
    this.$divWrapper = $('<div class="edit-text"><input type="text" disabled="disabled" class="editTextInput" /></div>');
    this.$divWrapper.addClass(this.$element.attr("class"));
    this.$input = $(".editTextInput", this.$divWrapper).css("display", "none");
    this.$element.after(this.$divWrapper);
    this.$divWrapper.append(this.$element);
    this.$input.val(this.$element.html());
    this.$divWrapper.click({
        editText: this
    }, this.onClickHandler);
};

EditText.prototype.onClickHandler = function(e) {
    var t = e.data.editText;
    t.$input.css("display", "").prop("disabled", false).attr("class", "editTextInput " + t.$element.attr("class"));
    t.$element.css("display", "none");
    t.$divWrapper.unbind("click");
    t.$input.select().blur({
        editText: t
    }, t.finishText).keypress({
        editText: t
    }, t.onKeypress);
};

EditText.prototype.onKeypress = function(e) {
    var t = e.keyCode ? e.keyCode : e.which;
    var o = e.data.editText;
    switch (t) {
      case 13:
        o.finishText(e);
        break;

      case 27:
        o.$input.val(o.$element.html());
        e.data.noSave = true;
        o.finishText(e);
        break;
    }
};

EditText.prototype.finishText = function(e) {
    var t = e.data.editText;
    t.$input.prop("disabled", true).unbind("blur").unbind("keypress").css("display", "none");
    t.$element.css("display", "").html(t.$input.val());
    t.$divWrapper.click({
        editText: t
    }, t.onClickHandler);
    if (typeof e.data.noSave == "undefined") {
        t.saveCallback(t.$element);
    }
};

EditText.prototype.destroy = function() {
    this.$divWrapper.unbind("click");
    this.$divWrapper.before(this.$element);
    this.$divWrapper.remove();
    this.$divWrapper = null;
    this.$input.remove();
    this.$input = null;
    this.$element = null;
    this.saveCallback = null;
};

var Home = function() {
    var e = null;
    var t = null;
    var o = null;
    var n = null;
    var i = null;
    var a = null;
    var l = null;
    var s = [];
    var r = false;
    function c(e) {
        $(".next-button").click(x);
        $(".back-button").click(L);
        $(".create-button").click(x);
        switch (e) {
          case "lost":
            i = $("#lostTripPage");
            a = $("#sentEmailPage");
            l = i;
            v();
            break;

          default:
            o = $("#infoPage");
            n = $("#locationPage");
            l = n;
            h();
            break;
        }
        $(document).keydown(function(e) {
            switch (e.which) {
              case 13:
                x();
                break;
            }
        });
    }
    function d(e) {
        var t = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return t.test(e);
    }
    function u(e) {
        var o = true;
        for (var n = 0, i = s.length; n < i; n++) {
            if ($.trim(s[n].val()) == "") {
                o = false;
            }
            if (s[n].hasClass("error")) {
                s[n].removeClass("error");
            }
        }
        if (o) {
            t.removeClass("hidden");
        } else {
            t.addClass("hidden");
        }
    }
    function f() {
        r = false;
        s = [ $("#txtName"), $("#txtEmail") ];
        s[0].prop("disabled", false).keyup(u).focus();
        s[1].prop("disabled", false).keyup(u);
        t = $(".next-button", o);
        $(".back-button", o).removeClass("hidden");
        u();
    }
    function p() {
        s[0].prop("disabled", true).unbind("keyup");
        s[1].prop("disabled", true).unbind("keyup");
        s[0].val($.trim(s[0].val()));
        s[1].val($.trim(s[1].val()));
        t.addClass("hidden");
        $(".back-button", o).addClass("hidden");
    }
    function h() {
        r = false;
        s = [ $("#txtLocation") ];
        s[0].prop("disabled", false).keyup(u).focus();
        t = $(".next-button", n);
        u();
        var e = {
            types: [ "(regions)" ]
        };
        var o = new google.maps.places.Autocomplete(s[0][0], e);
    }
    function m() {
        s[0].prop("disabled", true).unbind("keyup");
        t.addClass("hidden");
    }
    function v() {
        r = false;
        s = [ $("#txtEmail") ];
        s[0].prop("disabled", false).keyup(u).focus();
        t = $(".next-button", i);
    }
    function k() {
        s[0].val($.trim(s[0].val()));
        s[0].prop("disabled", true).unbind("keyup");
    }
    function L() {
        if (r) return;
        r = true;
        var e;
        l.removeClass("page-current").addClass("page-right");
        switch (l) {
          case o:
            p();
            l = n;
            e = h;
            break;
        }
        l.removeClass("page-left").addClass("page-current");
        TransitionController.transitionEnd(l, e);
        return false;
    }
    function x() {
        if (r) return;
        if (t.hasClass("hidden")) {
            if (s && s.length > 1) {
                for (var e = 0, a = s.length - 1; e < a; e++) {
                    if (s[e].is(":focus")) {
                        s[e + 1].focus();
                        break;
                    }
                }
            }
            return;
        }
        var c;
        switch (l) {
          case o:
            if (!d(s[1].val())) {
                s[1].addClass("error");
                return;
            }
            r = true;
            l.removeClass("page-current").addClass("page-left");
            p();
            $(".trip-subtitle").html("by " + s[0].val());
            $(".email").html(s[1].val());
            b();
            break;

          case n:
            r = true;
            l.removeClass("page-current").addClass("page-left");
            m();
            $(".trip-title").html(s[0].val());
            l = o;
            c = f;
            break;

          case i:
            if (!d(s[0].val())) {
                s[0].addClass("error");
                return;
            }
            g();
            break;
        }
        l.removeClass("page-right").addClass("page-current");
        TransitionController.transitionEnd(l, c);
        return false;
    }
    function b() {
        var e = $("#txtName").val();
        var t = $("#txtEmail").val();
        var o = $("#txtTripName").val();
        var n = $("#txtLocation").val();
        Main.loadBlock();
        Ajax.call("createTrip", {
            name: e,
            email: t,
            tripName: o,
            location: n
        }, C);
    }
    function g() {
        var e = $("#txtEmail").val();
        if (!d(e)) {
            $("#txtEmail").addClass("error");
            return;
        }
        Main.loadBlock();
        Ajax.call("sendEmail", {
            adminEmail: e
        }, y);
    }
    function C(e) {
        if (e.success) {
            window.location = "/" + e.tripHash;
        } else {
            alert("ERROR!");
        }
    }
    function y(e) {
        Main.loadRelease();
        if (e.message == "no trips") {
            alert("No trips were found.");
            return;
        }
        r = true;
        l.removeClass("page-current").addClass("page-left");
        k();
        l = a;
        l.removeClass("page-right").addClass("page-current");
    }
    return {
        init: c
    };
}();

if (typeof console == "undefined") {
    console = {
        log: function() {}
    };
}

var GLOBAL = {
    isAdmin: false,
    polltime: 15e3,
    lastLocation: 0,
    lastNote: 0,
    lastNotice: 0,
    activeNoteLocation: null,
    noteCookie: false
};

var Notice = function() {
    var e = [];
    var t = null;
    var o = null;
    var n = 0;
    var i = null;
    var a = false;
    function l(t, o) {
        o = typeof o === "undefined" ? false : o;
        e.unshift(t);
        if (t._id > GLOBAL.lastNotice) {
            GLOBAL.lastNotice = t._id;
        }
        if (!o) {
            s();
        }
    }
    function s() {
        if (!t) {
            o = $("#noticeContainer");
            o.css("display", "block");
            t = $(".notice", o);
            n = o.offset().top;
            i = $(document);
            $(window).scroll(c);
        }
        c();
        t.removeClass("down").addClass("up");
        $(".notice-text", t).html(e[0].notice);
        $(".delete-link", t).unbind("click");
        setTimeout(function() {
            t.removeClass("up");
            TransitionController.transitionEnd(t, function() {
                $(".delete-link", t).bind("click", r);
            });
        }, 1);
    }
    function r(o) {
        $(".delete-link", t).unbind("click");
        t.removeClass("up").addClass("down");
        TransitionController.transitionEnd(t, function() {
            d();
        });
        Ajax.call("deleteNotice", {
            noticeId: e[0]._id
        }, null, null, true);
    }
    function c() {
        if (a) {
            return;
        }
        if (i.scrollTop() >= n) {
            o.addClass("fixed");
        } else {
            o.removeClass("fixed");
        }
        a = true;
        setTimeout(function() {
            a = false;
        }, 50);
    }
    function d() {
        e.shift();
        if (e.length > 0) {
            s();
        } else {
            o.css("display", "none");
            t = null;
            o = null;
            $(window).unbind("scroll", c);
        }
    }
    return {
        addNotice: l
    };
}();

var Settings = function() {
    var e = false;
    var t = false;
    function o() {
        $("txtTripName").val();
    }
    function n() {
        if (t) {
            o();
        } else {
            close();
        }
    }
    return {
        toggleSettings: n
    };
}();

var Main = function() {
    var e = [];
    function t(e) {
        Ajax.init(e.a);
        GLOBAL.isAdmin = e.isAdmin;
        GLOBAL.noteCookie = e.noteCookie;
        $("#shareTripButton").click(c);
    }
    function o() {
        $("#loadBlocker").css("display", "block");
    }
    function n() {
        $("#loadBlocker").css("display", "none");
    }
    function i(t, o, n) {
        if (n == "") return;
        e.push({
            location: t,
            noteId: o,
            url: n
        });
        a();
    }
    function a() {
        if (e.length == 0) return;
        var t = e[0];
        Ajax.call("checkLink", {
            noteId: t.noteId,
            url: t.url
        }, function(e) {
            t.location.parseNote(t.noteId, e);
            a();
        }, function() {
            a();
        }, true);
        e.shift();
    }
    function l() {
        setTimeout(s, GLOBAL.polltime);
    }
    function s() {
        Ajax.call("poll", {
            lastLocation: GLOBAL.lastLocation,
            lastNote: GLOBAL.lastNote,
            lastNotice: GLOBAL.lastNotice,
            polltime: GLOBAL.polltime
        }, r, r, true);
    }
    function r(e) {
        if (e && e.success) {
            GLOBAL.polltime = e.polltime ? e.polltime : GLOBAL.polltime;
            var t;
            for (t = 0; t < e.locations.length; t++) {
                Trip.addLocation(e.locations[t]);
            }
            for (t = 0; t < e.notes.length; t++) {
                Trip.addNote(e.notes[t], true);
            }
            if (GLOBAL.isAdmin) {
                for (t = 0; t < e.notices.length; t++) {
                    Notice.addNotice(e.notices[t]);
                }
            }
        }
        l();
    }
    function c() {
        Modal.load("/views/modal/shareTrip.html", function() {
            $(".text-box", $("#modalContent")).val("http://" + window.location.hostname + window.location.pathname).select();
            $("#doneButton").click(function() {
                $("#doneButton").unbind("click");
                Modal.close();
                return false;
            });
        }, "share-modal");
        return false;
    }
    return {
        init: t,
        loadBlock: o,
        loadRelease: n,
        queueLinkCheck: i,
        poll: l
    };
}();